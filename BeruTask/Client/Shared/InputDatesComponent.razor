@using BeruTask.Client.Services.Interfaces
@using BeruTask.Shared

<EditForm EditContext="editContext" OnValidSubmit=@handleSubmit>
    <DataAnnotationsValidator />
    <div class="panel col-6 offset-3 col-lg-4 offset-lg-4 mt-4 ">
        <h1 class="display-5 title">Gold price</h1>
        <div class="row">
            <div class="form-group col-12 col-lg-6">
                <label for="startDate">Start date:</label>
                <InputDate @bind-Value=model.startDate class="form-control w-100" Max='@DateTime.Today' id="startDate" aria-describedby="emailHelp" placeholder="Enter date" />

            </div>
            <div class="form-group col-12 col-lg-6">
                <label for="endDate">End date:</label>
                <InputDate @bind-Value=model.endDate class="form-control w-100" Max='@DateTime.Today' id="endDate" aria-describedby="emailHelp" placeholder="Enter date" />
            </div>
        </div>
        @if (!string.IsNullOrEmpty(valMsg))
        {
            <div class="row mt-3 ">
                <div class="col-12 alert alert-danger text-center mt-3 ">
                    @valMsg
                </div>
            </div>
        }
        <div class="d-flex justify-content-center justify-content-lg-end mt-3">
            <input type="submit" class="btn btn-primary" value="Get data" />
        </div>

    </div>

</EditForm>



@code {
    private EditContext? editContext;
    private RequestModel model;

    private string valMsg = string.Empty;
    [Inject]
    private IGoldPriceService _goldPriceService { get; set; }

    protected override void OnInitialized()
    {
        this.model = new RequestModel();
        editContext = new(model);
        editContext.OnFieldChanged += HandleValidationRequested;
        base.OnInitialized();
    }
    private void HandleValidationRequested(object sender, FieldChangedEventArgs e)
    {
        editContext.Validate();
        valMsg = editContext.GetValidationMessages().FirstOrDefault() ?? "";
    }
    public async Task handleSubmit()
    {
        await this._goldPriceService.getData(this.model);
    }
    public void Dispose()
    {
        if (editContext is not null) editContext.OnFieldChanged -= HandleValidationRequested;
    }
}
